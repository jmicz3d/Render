/*
 * Yet another attempt at a rendering engine
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
/* Use glew.h instead of gl.h to get all the GL prototypes declared */
#include <GL/glew.h>
/* Using the GLUT library for the base windowing setup */
#include <GL/freeglut.h>


GLuint scr_width 800
GLuint scr_height 600

//program is a handle for all sorts of information? (logs, shaders, etc.)
GLuint program;

int init_resources()
{

  GLint link_ok = GL_FALSE;

  program = glCreateProgram();

  GLuint vertex_shader, fragment_shader;

  vertex_shader = /*TODO*/create_shader("shader.v.glsl", GL_VERTEX_SHADER);
  glAttachShader(program, vertex_shader);

  fragment_shader = /*TODO*/create_shader("shader.f.glsl", GL_FRAGMENT_SHADER);
  glAttachShader(program, fragment_shader);

  glLinkProgram(program);

  glGetProgramiv(program, GL_LINK_STATUS, &link_ok);
  if(!link_ok){
    fprintf(stderr, "Error! glLinkProgram:");
    print_log(program);
    return 0;
  }

  /*TODO: bind uniforms for matricies*/

  return 1;
}

//Idle, just redisplay
void onIdle()
{
  glutPostRedisplay();
}


